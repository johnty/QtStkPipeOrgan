{"name":"QtStkPipeOrgan","tagline":"Realtime Pipe Organ Implementation in STK","body":"### A Realtime Pipe Organ Instrument using QT and STK\r\n\r\nJohnty Wang (johnty.wang@mail.mcgill.ca)\r\n\r\nProject Final Report for MUMT618, Fall 2015. \r\n\r\nInstructor: Prof. Gary Scavone\r\n\r\n\r\n###Introduction\r\n\r\nThis project report describes the implementation of a pipe organ instrument in C++ using the Stk, RtAudio and QT libraries. The result is a cross-platform C++ GUI application that simulates a X-register pipe organ with X1 and X2 sets of flue and reed pipes, respectively. The instrument appears as a virtual MIDI device that can be controlled by hardware controllers: note-on/off messages control pitches while program changes allow toggling of stops. Using a single MIDI keyboard, the behavior of a small chamber organ can be simulated. The rest of the report consists of the following sections: 1.) An introduction and background on the physical layout and relevant parts of a pipe organ, 2.) A discussion on how the sound of different pipes are modelled, and 3.) Implementation details of the C++ application, with some potentially useful documentation for anyone interested in integrating Stk with the QT C++ framework.\r\n\r\n![Ryerson United Church, Vancouver BC](https://lh3.googleusercontent.com/O4K-Vno-Zug19PoHnjrpKpGd7iiH60VzjzdGV9Yd44mu2XtwHTpfwnorpvIKD-u4700ygEuUS0zomSmuRchUVjZO50UU3rHOPul27YiTWvYPB7StNKsgmzb7IO97Pg1s9u5_FWvUhm1EtSV1SM1PCk0Y9eg_X3Z0J2tI5HuVJVuLOz5hzeQH_Yi849jJHPGf6zPzbJdhLqLMfGsaz1COOsZRFyl-i2NrZGaQeFJsEvAPnVdERwQkpNV0Zz7jgGJ8NSwKmgIKuiPbJu645GBn7uXz8n5lOBnYjheR6H3yulkYVhhY5DKxFT0cCa2gVMvEnDd-X5DjjbhwwplG6dcsnr0mpC_YHlt3YVmBDIesY9sd1tmZeRsGo7guHFjSRU6w-6moN8xKjhC2uFnIkqS1BxOPae7jlgkT_DK0csieqiL8JU7inJSuTn1gcywES7v8U0pyYk7Zp46c163YCTEqi07QiR796bL1zfwR9U6-RR1pYDlORDjfuNrEMrirZM_WdmQmNPF9KSI1ncczPxqw2m7WOVMeiVCEVA2foEm0dMU=w685-h913-no)\r\nThe organ at Ryerson United Church, Vancouver BC\r\n###Background\r\n\r\nDespite sharing what looks like a similar control scheme to a piano, the pipe organ is a very different instrument.\r\n\r\nThe pipe organ is a wind instrument, as opposed to string/percussion instruments that most other are. (One other exception is the accordion!)\r\n\r\n##Flue and Reed Pipes\r\n\r\nThere are two main kinds of pipes on an organ. The first is a flue pipe, which \r\n\r\nThe reed pipe is\r\n\r\n##Air Source\r\n\r\nThe rows of organ\r\n\r\n##Combinations\r\n\r\n\r\n\r\n##Control System/Inputs\r\n\r\nKeyboard: 6 octaves of chromatic notes,. Set of 3-6 depending on instrument. Referred to as manuals.\r\n\r\nPedalboard: 1 ~ 3 octaves of chromatic notes, activated by foot\r\n\r\nStops: pull controls \r\n\r\nFoot switches: discrete buttons for activating settings\r\n\r\nModern organs with digital controls allow storage of presets\r\n\r\n#*The Organ could be considered the world's first \"synthesizer\"*#\r\n\r\n\r\n\r\nSome of the more obvious differences include the sound generation mechanism: the pipe organ functions more like a wind instrument (both reeded and open hole) rather than a string struck by a percussive hammer. \r\n\r\nSecond, with exception to the swell box shutters that control the amount of sound that exits the enclosure housing the pipes, the volume produced by the instrument is mostly controlled by the number of active \"stops\", or groups called \"registers\" that are activated at the same time. This means that the amount of volume, and tone output is defined by the currently selected mixture of stops, rather than the velocity in which the key is played.\r\n\r\n## Commercial Products\r\n\r\nOne of the more famous virtual software organ systems is [Hauptwerk](https://www.hauptwerk.com/learn-more/overview/). It has an extensive sample-based library of many organs.\r\n\r\n\r\n\r\n\r\n###Implementation\r\n\r\nMost of the development was performed on a Windows laptop with 8GB RAM and an Intel i7-4510u processor. The reason Windows was chosen was, based on prior experience, integrating such cross platform libraries tend to be the most difficult on this operating system, and hence having figured out how to set it up for this case, the rest should be considerably easier.\r\n\r\n![test ](img/system.png)\r\n\r\n###Instrument Models\r\n\r\nAs described in the previous section, there are two main categories of organ pipes: the flue and the reed.\r\n\r\n![test ](img/keyboard-flutes.png)\r\n\r\n##Framework Overview\r\nQT is ... Stk/RtAudio\r\n\r\n##Library Integration\r\n\r\nchallenges (esp. windows)\r\n\r\n##Realtime Audio Implementation\r\n\r\nVirtual MIDI Control\r\n\r\n###Performance Metrics\r\nVery early in the implementation, as soon as the real time dac was integrated, I wanted to make sure there was enough processing power to handle a large number of voices. As a very crude first test, I attempted to compute a large number of sine waves. The number achieved without noticeable dropouts in the audio stream was somewhere between 512 and 800 simultaneous Stk Sine objects that were computed sample by sample (using a single .tick() command for each frame. As a comparison, the same code, when running on a desktop-class i5 system, ran without dropouts at around 900 objects. Of course, this is not a rigorous test by any means, but should provide a general ballpark figure.\r\n\r\n###Discussion and Conclusion\r\n\r\nloren ipsum\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}