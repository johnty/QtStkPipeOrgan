{"name":"QtStkPipeOrgan","tagline":"Realtime Pipe Organ Implementation in STK","body":"### A Realtime Pipe Organ Instrument using QT and STK\r\n\r\nThis project report describes the implementation of a pipe organ instrument in C++ using the Stk, RtAudio and QT libraries. The result is a cross-platform C++ GUI application that simulates a X-register pipe organ with X1 and X2 sets of flue and reed pipes, respectively. The instrument appears as a virtual MIDI device that can be controlled by hardware controllers: note-on/off messages control pitches while program changes allow toggling of stops. Using a single MIDI keyboard, the behavior of a small chamber organ can be simulated. The rest of the report consists of the following sections: 1.) An introduction and background on the physical layout and relevant parts of a pipe organ, 2.) A discussion on how the sound of different pipes are modelled, and 3.) Implementation details of the C++ application, with some potentially useful documentation for anyone interested in integrating Stk with the QT C++ framework.\r\n\r\n\r\n### Organ\r\n\r\n![alt text](img/keyboard.png \"keyboard\")\r\n![test ](img/keyboard-flutes.png)\r\n![Ryerson United Church, Vancouver BC](https://lh3.googleusercontent.com/O4K-Vno-Zug19PoHnjrpKpGd7iiH60VzjzdGV9Yd44mu2XtwHTpfwnorpvIKD-u4700ygEuUS0zomSmuRchUVjZO50UU3rHOPul27YiTWvYPB7StNKsgmzb7IO97Pg1s9u5_FWvUhm1EtSV1SM1PCk0Y9eg_X3Z0J2tI5HuVJVuLOz5hzeQH_Yi849jJHPGf6zPzbJdhLqLMfGsaz1COOsZRFyl-i2NrZGaQeFJsEvAPnVdERwQkpNV0Zz7jgGJ8NSwKmgIKuiPbJu645GBn7uXz8n5lOBnYjheR6H3yulkYVhhY5DKxFT0cCa2gVMvEnDd-X5DjjbhwwplG6dcsnr0mpC_YHlt3YVmBDIesY9sd1tmZeRsGo7guHFjSRU6w-6moN8xKjhC2uFnIkqS1BxOPae7jlgkT_DK0csieqiL8JU7inJSuTn1gcywES7v8U0pyYk7Zp46c163YCTEqi07QiR796bL1zfwR9U6-RR1pYDlORDjfuNrEMrirZM_WdmQmNPF9KSI1ncczPxqw2m7WOVMeiVCEVA2foEm0dMU=w685-h913-no)\r\n\r\n![ext link 2](https://ryersonunited.files.wordpress.com/2014/03/ryerson-organ-pipes.jpg)\r\n\r\n[[File:Cradley Heath Baptist Church Organ A01.JPG|400px|thumb|Interior of the organ at Cradley Heath Baptist Church showing the tracker action. The black rods, called rollers, rotate to transmit movement sideways to line up with the pipes.]]\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}